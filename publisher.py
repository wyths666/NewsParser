# publisher.py
import asyncio
import sqlite3
import random
import logging
from aiogram import Bot, types
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv
import os
import datetime

def get_sleep_duration():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–ø–∞—Ç—å –¥–æ 7 —É—Ç—Ä–∞"""
    now = datetime.datetime.now()

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
    if datetime.time(2, 0) <= now.time() < datetime.time(7, 0):
        # –°–æ–∑–¥–∞–µ–º datetime –Ω–∞ 7:00 —Å–µ–≥–æ–¥–Ω—è
        wakeup_time = now.replace(hour=7, minute=0, second=0, microsecond=0)
        # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 7:00, –±–µ—Ä–µ–º 7:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        if now >= wakeup_time:
            wakeup_time += datetime.timedelta(days=1)

        sleep_seconds = (wakeup_time - now).total_seconds()
        return sleep_seconds

    return 0  # –ù–µ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
DB_NAME = 'news.db'
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

if not BOT_TOKEN or not CHANNEL_ID:
    raise ValueError("TELEGRAM_BOT_TOKEN –∏/–∏–ª–∏ TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
PUBLISH_INTERVAL_MIN = 10
PUBLISH_INTERVAL_MAX = 20

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–î ---
def get_next_processed_news(db_name: str) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'processed' –∏–∑ –ë–î.
    """
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'processed'
        cursor.execute(
            "SELECT title, title_ru, processed_full_text, link, source FROM news WHERE published = 'processed' ORDER BY RANDOM() LIMIT 1"
        )
        row = cursor.fetchone()
        if row:
            return {
                'title': row[0],
                'title_ru': row[1],
                'processed_full_text': row[2],
                'link': row[3],
                'source': row[4]

            }
        else:
            return None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return None
    finally:
        conn.close()

def mark_news_as_published(db_name: str, title: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ 'published_to_tg'.
    """
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "UPDATE news SET published = 'published_to_tg' WHERE title = ?",
            (title,)
        )
        conn.commit()
        success = cursor.rowcount > 0
        if success:
            logger.info(f"–ù–æ–≤–æ—Å—Ç—å '{title[:50]}...' –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è –≤ Telegram.")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏ '{title[:50]}...'. –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return success
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ '{title[:50]}...': {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

# --- –§–£–ù–ö–¶–ò–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –í TELEGRAM ---
async def publish_news_to_telegram(bot: Bot, news_item: dict):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram-–∫–∞–Ω–∞–ª.
    """
    try:
        title_ru = news_item['title_ru']
        source = news_item['source']
        processed_text = news_item['processed_full_text']
        link = news_item['link']
        emozi = ['üì∞', 'üìÑ', '‚ô®Ô∏è', '‚ÄºÔ∏è', '‚≠ê', '‚ö°', 'üí•', 'üß®', 'üéâ', 'üåü', '‚ú®', 'üì®', '‚ùó']

        if not title_ru or not processed_text:
            logger.warning(f"–ù–æ–≤–æ—Å—Ç—å '{news_item['title'][:50]}...' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–ª–æ—Å—å
            mark_news_as_published(DB_NAME, news_item['title'])
            return
        if 'vpn' in processed_text.lower(): # –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ vpn —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ 'vpn' –≤ —Ç–µ–∫—Å—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title'][:50]}...'")
            mark_news_as_published(DB_NAME, news_item['title'])
            return
        if '–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —Å–∞–π—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ —ç—Ç—É —Ç–µ–º—É.' in processed_text:
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ gpt –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title'][:50]}...'")
            mark_news_as_published(DB_NAME, news_item['title'])
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text = f"{random.choice(emozi)}<b>{source}: {title_ru}</b>\n\n{processed_text}\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ üëá</a>"

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –º–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç/—Å—Ç–∞—Ç—å—é (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∑–¥–µ—Å—å)
        MAX_TELEGRAM_MESSAGE_LENGTH = 4000 # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        if len(message_text) > MAX_TELEGRAM_MESSAGE_LENGTH:
            logger.warning(f"–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ '{title_ru[:30]}...' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤). –û–±—Ä–µ–∑–∞–µ–º.")
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–ª—è—è –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Å—Å—ã–ª–∫–∏ –∏ ...
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–µ–∑–∫–∏
            available_text_length = MAX_TELEGRAM_MESSAGE_LENGTH - len(f"<b>{title_ru}</b>\n\n...\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>")
            if available_text_length > 100:
                processed_text_trimmed = processed_text[:available_text_length - 3] + "..."
                message_text = f"<b>{title_ru}</b>\n\n{processed_text_trimmed}\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>"
            else:
                 # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –º–∞–ª–æ –º–µ—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫—É
                 message_text = f"<b>{title_ru}</b>\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>"
                 logger.warning("–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫—É.")


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            parse_mode='HTML',
            disable_web_page_preview=False # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        )
        logger.info(f"–ù–æ–≤–æ—Å—Ç—å '{title_ru[:50]}...' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        mark_news_as_published(DB_NAME, news_item['title'])

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title_ru'][:50]}...': {e}")
        # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –ø–æ–º–µ—á–∞—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏ –æ—à–∏–±–∫–µ Telegram
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ "Bad Request: message is too long", —Ç–æ –¥–∞, –∏–Ω–∞—á–µ - –Ω–µ—Ç.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –Ω–µ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—É—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ '{news_item['title_ru'][:50]}...': {e}", exc_info=True)
        # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ---
async def run_publisher():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
    """

    logger.info("=== –ó–∞–ø—É—Å–∫ Telegram Publisher ===")
    bot = Bot(token=BOT_TOKEN)

    try:
        while True:
            sleep_duration = get_sleep_duration()
            if sleep_duration > 0:
                logger.info(f'üåô –ù–æ—á–Ω–æ–π –ø–µ—Ä–µ—Ä—ã–≤. –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —É—Ç—Ä–∞: {sleep_duration / 3600:.1f} —á–∞—Å–æ–≤')
                await asyncio.sleep(sleep_duration)
                continue
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
            news_item = get_next_processed_news(DB_NAME)

            if news_item:
                # 2. –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞, –ø—É–±–ª–∏–∫—É–µ–º –µ—ë
                await publish_news_to_telegram(bot, news_item)
            else:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delay_minutes = random.randint(PUBLISH_INTERVAL_MIN, PUBLISH_INTERVAL_MAX)
            delay_seconds = delay_minutes * 60
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")

            # 4. –ñ–¥–µ–º
            await asyncio.sleep(delay_seconds)

    except asyncio.CancelledError:
        logger.info("Publisher task was cancelled.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ publisher: {e}", exc_info=True)
    finally:
        await bot.session.close()
        logger.info("=== Telegram Publisher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    try:
        asyncio.run(run_publisher())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C). –ó–∞–∫—Ä—ã–≤–∞–µ–º publisher...")